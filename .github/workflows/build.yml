name: Build flask-android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y zip unzip openjdk-17-jdk python3-pip git zip unzip libssl-dev libffi-dev build-essential

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install buildozer cython

      - name: Setup Android SDK and Build Tools
        run: |
          # Create Android SDK directory
          mkdir -p $HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          
          # Download command line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O /tmp/tools.zip
          unzip -q /tmp/tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
          
          # Add to PATH
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> $GITHUB_PATH
          
          # Set environment variables
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

      - name: Install Android Packages
        run: |
          # Accept licenses first
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          
          # Install platform tools, build tools, platform, and NDK
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "build-tools;34.0.0" \
            "platforms;android-34" \
            "ndk;25.2.9519653"
          
          # Verify Aidl is available
          $ANDROID_SDK_ROOT/build-tools/34.0.0/aidl --help || echo "Aidl check completed"

      - name: Setup Buildozer Directories
        run: |
          # Create symlinks for Buildozer
          mkdir -p ~/.buildozer/android/platform
          ln -sfn $ANDROID_SDK_ROOT ~/.buildozer/android/platform/android-sdk
          
          # Find and link NDK
          NDK_PATH=$(find $ANDROID_SDK_ROOT -name "ndk*" -type d | head -n 1)
          if [ -n "$NDK_PATH" ]; then
            echo "Linking NDK: $NDK_PATH"
            ln -sfn $NDK_PATH ~/.buildozer/android/platform/android-ndk
          else
            echo "Warning: NDK not found"
          fi

      - name: Build APK with Buildozer
        run: |
          # Check if buildozer.spec exists and is valid
          if [ -f "buildozer.spec" ]; then
            echo "Using existing buildozer.spec file"
          else
            echo "No buildozer.spec found, initializing..."
            buildozer init
          fi
          
          # Build the APK with verbose output
          buildozer -v android debug

      - name: List Generated Files
        run: |
          ls -la bin/ 2>/dev/null || echo "No bin directory found"
          find . -name "*.apk" -o -name "*.aab" 2>/dev/null | head -n 10 || echo "No APK files found"

      - name: Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: flask-android-apk
          path: bin/*.apk
          if-no-files-found: error